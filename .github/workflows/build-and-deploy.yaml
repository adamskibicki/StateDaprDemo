name: Build and Deploy
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
    paths-ignore:
      - "README.md"
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }}
jobs:
  set-env:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.main.outputs.version }}
      created: ${{ steps.main.outputs.created }}
      repository: ${{ steps.main.outputs.repository }}
    steps:
      - id: main
        run: |
          echo ::set-output name=version::$(echo ${GITHUB_SHA} | cut -c1-7)
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=repository::$GITHUB_REPOSITORY
          
  deploy-acr:
    runs-on: ubuntu-latest
    needs: [ set-env ]
    outputs:
      dockerLoginServer: ${{ steps.deploy-bicep.outputs.dockerLoginServer }}
      acrUsername: ${{ steps.deploy-bicep.outputs.acrUsername }}
      acrPassword: ${{ steps.deploy-bicep.outputs.acrPassword }}
    steps:
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v1.0.1
        with:
          version: '${{ inputs.version }}'
          force: '${{ inputs.force }}'

      - name: 'Check jq'
        run: |
          which jq
          jq --version
          
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy bicep
        id: deploy-bicep
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l westeurope
            dockerLoginServer=$(az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deploy/acr.bicep | jq -r '.properties.outputs.loginServer.value')
            echo "::set-output name=dockerLoginServer::$dockerLoginServer"
            acrUsername=$(az acr credential show --name $dockerLoginServer --resource-group ${{ secrets.RESOURCE_GROUP }} | jq -r '.username')
            echo "::set-output name=acrUsername::$acrUsername"
            acrPassword=$(az acr credential show --name $dockerLoginServer --resource-group ${{ secrets.RESOURCE_GROUP }} | jq -r '.passwords[0].value')
            echo "::set-output name=acrPassword::$acrPassword"
            
  package-services:
    runs-on: ubuntu-latest
    needs: [deploy-acr, set-env]
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage-orders: ${{ steps.image-tag.outputs.image-orders-service }}
      containerImage-storeapi: ${{ steps.image-tag.outputs.image-storeapi-service }}
      containerImage-inventory: ${{ steps.image-tag.outputs.image-inventory-service }}
    strategy:
      matrix:
        services:
          [
            { "appName": "orders-service", "context": ".", "dockerfilePath": "./OrdersService/Dockerfile" },
            { "appName": "store-api", "context": ".", "dockerfilePath": "./StoreAPI/Dockerfile" },
            { "appName": "inventory-service", "context": ".", "dockerfilePath": "./InventoryService/Dockerfile" },
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ needs.deploy-acr.outputs.dockerLoginServer }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.deploy-acr.outputs.dockerLoginServer }}
          username: ${{ needs.deploy-acr.outputs.acrUsername }}
          password: ${{ needs.deploy-acr.outputs.acrPassword }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ needs.deploy-acr.outputs.dockerLoginServer }}/${{ needs.set-env.outputs.repository }}/${{ matrix.services.appName }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: List files in the repository
        run: |
          ls -R ${{ github.workspace }}
      - name: List files in the service context
        run: |
          ls -R ${{ matrix.services.context }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.services.context }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ matrix.services.dockerfilePath }}
      - name: Output image tag
        id: image-tag
        run: |
          echo ::set-output name=image-${{ matrix.services.appName }}::${{ needs.deploy-acr.outputs.dockerLoginServer }}/$GITHUB_REPOSITORY/${{ matrix.services.appName }}:sha-${{ needs.set-env.outputs.version }} | tr '[:upper:]' '[:lower:]'
      
  deploy:
    runs-on: ubuntu-latest
    needs: [package-services, deploy-acr]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy bicep
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l westeurope
            az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deploy/main.bicep \
             -p \
                minReplicas=0 \
                ordersServiceImage='${{ needs.package-services.outputs.containerImage-orders }}' \
                ordersServicePort=80 \
                storeapiImage='${{ needs.package-services.outputs.containerImage-storeapi }}' \
                storeapiPort=80 \
                inventoryImage='${{ needs.package-services.outputs.containerImage-inventory }}' \
                inventoryPort=80 \
                containerRegistry=${{ needs.deploy-acr.outputs.dockerLoginServer }} \
                containerRegistryUsername=${{ needs.deploy-acr.outputs.acrUsername }} \
                containerRegistryPassword=${{ needs.deploy-acr.outputs.acrPassword }}
